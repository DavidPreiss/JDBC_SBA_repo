package jpa.service;

import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentService implements StudentDAO {

    @Override
    public List<Student> getAllStudents() throws SQLException {
        /*
            This method reads the
    student table in your database
    and returns the data as
    a List<Student>

         */
        List<Student> retval = new ArrayList<>();
        final String URL = "jdbc:mariadb://localhost/DAVIDS_DATABASE_5_5_2021";
        final String USER = "root";
        final String PASS = "root";

        Connection conn = DriverManager.getConnection(URL,USER,PASS);

        String selectSQL = "SELECT * FROM student;";
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery(selectSQL);
        int counter = 0;
        while(result.next())
        {
            //loop start
            String name = result.getString("name");
            String password = result.getString("password");
            String email = result.getString("email");
            Student addStudent = new Student(email,name,password,null);
            retval.add(addStudent);
            //System.out.printf("%-20s  | %-20s | %-10s \n",name,password,email);
            counter++;
        }
        conn.close();
        return retval;
    }

    @Override
    public Student getStudentsByEmail(String sEmail) {
        return null;
        /*
        –This method takes a
        Student’s email as a
        String and parses the
        student list for a
        Student with that email
        and returns a Student
        Object.
         */
    }

    @Override
    public boolean validateStudent(String sEmail, String sPassword) {
        return false;
        /*
        –This method takes two
        parameters: the first
        one is the user email
        and the second one is
        the password from the
        user input. Return
        whether or not student
        was found.
         */
    }

    @Override
    public void registerStudentToCourse(String sEmail, int cId) {
        /*
        –After a successful
        student validation,
        this method takes a
        Student’s email and a
        Course ID. It checks in
        the join table (i.e.
        Student_Course)
        generated by JPA to find
        if a Student with that
        Email is currently
        attending a Course with
        that ID.
        If the Student is not
        attending that Course,
        register the student to
        that course; otherwise
        not.

         */
    }

    @Override
    public List<Course> getStudentCourses(String sEmail) {
        return null;
        /*
        –This method takes a
        Student’s Email as a
        parameter and would
        find all the courses a
        student is registered.
         */
    }
}
